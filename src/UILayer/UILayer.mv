import .UIFrame

if (!document.documentElement || document.documentElement.classList) {
  classNames = ^(el) { el.classList }
  addClassName = ^(el, className) { el.classList.add className }
  hasClassName = ^(el, className) { el.classList.contains className }
  removeClassName = ^(el, className) { el.classList.remove className }
} else {
  classNames = ^(el) { el.className.split(/\s+/) }
  addClassName = ^(el, className) { el.className += ' '+className }
  hasClassName = ^(el, className) { classNames(el).indexOf(className) != -1 }
  removeClassName = ^(el, className) {
    el.className = classNames(el).filter(^(n){ n != className }).join ' '
  }
}

DEPRECATED_WARN = ^(oldName, newName) {
  console.warn oldName+' is deprecated.'+(newName ? ' Use '+newName+' instead.' : '')
}
DEPRECATED_PROPERTY_WARNINGS = {}
DEPRECATED_PROPERTY = ^(oldName, newName) {return {get: ^{
  if (!DEPRECATED_PROPERTY_WARNINGS['get '+oldName]) {
    DEPRECATED_WARN oldName, newName
    DEPRECATED_PROPERTY_WARNINGS['get '+oldName] = true
  }
  this[newName]
}, set: ^(value) {
  if (!DEPRECATED_PROPERTY_WARNINGS['set '+oldName]) {
    DEPRECATED_WARN oldName, newName
    DEPRECATED_PROPERTY_WARNINGS['set '+oldName] = true
  }
  this[newName] = value
}}}

_canonicalColor = ^(color) {
  if (Array.isArray color) {
    if (color.length == 1) {
      # monochrome, no alpha
      color = [color,color,color]
    } else if (color.length == 2) {
      # monochrome with alpha
      color = [color[0],color[0],color[0],color[1]]
    }
    rgb = (255*Number(color[0] || 0)).toFixed(0)+','+
          (255*Number(color[1] || 0)).toFixed(0)+','+
          (255*Number(color[2] || 0)).toFixed(0)
    if (color[3] != undefined) {
      color = 'rgba('+rgb+','+Number(color[3] || 0)+')'
    } else {
      color = 'rgb('+rgb+')'
    }
  } else {
    color = Text color
  }
  color
}

_swapElement = ^(parentNode, oldElement, newElement, deep){
  newAttrs = newElement.attributes
  # Copy attributes
  oldAttributes = oldElement.attributes
  Array.prototype.slice.call(oldAttributes).forEach ^(attr) {
    oldAttributes.removeNamedItem attr.name
    newAttrs.setNamedItem attr
  }
  # Transfer child nodes
  if (deep) {
    Array.prototype.forEach.call oldElement.childNodes, ^(childNode) {
      newElement.appendChild childNode
    }
  }
  # Replace
  if (parentNode) {
    parentNode.replaceChild newElement, oldElement
  }

  otherUILayer = newElement.UILayer
  newElement.UILayer = oldElement.UILayer
  oldElement.UILayer = otherUILayer

  newElement
}


kSpecialProperties = {element:1, debug:1, x:1, y:1, width:1, height:1, className:1, ownerDocument:1}
import prefixed

# All the CSS & JS properties used in the script (expressed as CSS)
([
  'backface-visibility',
  'border-radius',
  'border-top-left-radius',
  'box-sizing',
  'perspective',
  'perspective-origin',
  'perspective-origin-x',
  'perspective-origin-y',
  'perspective-origin-z',
  'transform',
  'transform-origin',
  'transform-origin-x',
  'transform-origin-y',
  'transform-origin-z',
  'transform-style',
  'transition',
  'transition-delay',
  'transition-duration',
  'transition-property',
  'transition-timing-function',
  'user-select',
  'text-size-adjust'
])
# build a list of any prefixed versions of the CSS & JS properties
.forEach(prefixed.addProperty);

lookupCSS = ^(dashed) { prefixed.lookup.css[dashed] }
lookupJS = ^(camelCase) { prefixed.lookup.js[camelCase] }

# does the client support the 3 value syntax for `transform-origin`?
prefixed.features.addTest('transform_origin_3d', ^{
  propTransform = prefixed.lookup.css.transform;
  propOrigin = prefixed.lookup.css['transform-origin'];
  cssRule = '#modernizr { '
    + propOrigin    + ': 1px 2% 3em;'
    + propTransform + ': rotateY(50deg);'
    + ' }';
  test3ValueSyntaxSupport = ^(elem, rule) {
    computed = getComputedStyle(elem);
    property = prefixed.lookup.js.transformOrigin;
    value = computed[ property ];

    value.split(' ').length === 3;
  };

  prefixed.features.testStyles(cssRule, test3ValueSyntaxSupport);
});

module.exports = UILayer = class {
  constructor: ^{
    # keyword arguments or an object as the first argument are explicit values
    kwargs = typeof arguments[0] == 'object' ? arguments[0] : arguments.keywords || {}

    # Setup element
    element = kwargs.element
    if (!element || typeof element != 'object' || !(element instanceof HTMLElement)) {
      element = (kwargs.ownerDocument || document).createElement kwargs.drawContent ? 'canvas' : 'div'
    }
    element.UILayer = this
    kwargs.element = undefined
    addClassName element, 'uilayer'
    if (@className)  # from a subclass prototype
      addClassName element, @className
    if (kwargs.className)
      addClassName element, kwargs.className

    # Store element as a read-only value property
    @element_ = element
    Object.defineProperties this, {element: {enumerable:true, get: ^{ @element_ }}}

    # 3D-backed
    addClassName @element_, 'textureBacked'
    @_is3DBacked = true

    # Special properties
    if (kwargs.x != undefined) @frame.x = kwargs.x
    if (kwargs.y != undefined) @frame.y = kwargs.y
    if (kwargs.width != undefined) @frame.width = kwargs.width
    if (kwargs.height != undefined) @frame.height = kwargs.height
    # Debug adds a random background color
    if (kwargs.debug || (kwargs.debug == undefined && UILayer.debug))
      element.style.backgroundColor = 'hsla('+(Math.random()*359)+', 90%, 90%, 0.5)'

    # Anchor must be set
    if (!kwargs.anchor) {
      element.style.left = '0'
      element.style.top = '0'
    }

    # Set any remaining properties
    Object.prototype.forEach.call kwargs, ^(key, value) {
      if (value != undefined && value != _MoveKWArgsT && !(key in kSpecialProperties))
        this[key] = value
    }, this
  },

  # Used by drawContent
  drawContentAfterFrameSizeChange: ^(ev) {
    if (!ev || !(oldValues = ev.oldValues) || 'width' in oldValues || 'height' in oldValues) {
      # This is needed to get a properly sized drawing buffer. Probably a WebKit bug.
      @element_.width = @frame.width
      @element_.height = @frame.height
      @drawContent_()
    }
  }
}


# Returns an array of all layers in DOM *element*
UILayer.layersInElement = ^(element) {
  sublayers = []
  cn = element.childNodes
  for (i=0; i < cn.length; ++i) {
    el = cn[i]
    if (el.UILayer && UILayer.prototype.isPrototypeOf el.UILayer) sublayers.push el.UILayer
  }
  sublayers
}

# Returns the first sublayer
UILayer.firstLayerInElement = ^(element) {
  cn = element.childNodes
  for (i=0; i < cn.length; ++i) {
    el = cn[i]
    if (el.UILayer && UILayer.prototype.isPrototypeOf el.UILayer)
      return el.UILayer
  }
}

UILayer.layerWithTag = ^(tag) {
  el = document.getElementById Text tag
  (el && el.UILayer && UILayer.prototype.isPrototypeOf el.UILayer) && el.UILayer
}


# Simple toString function to aid in error messages, etc
UILayer.toString = ^{ '[object UILayer]' }


# Properties of the prototype
UILayer.properties = {
  is3DBacked: { get: ^{ !!@_is3DBacked } },

  sublayers: {
    get: ^{ @drawContent_ ? [] : UILayer.layersInElement @element_ },
    set: ^(sublayers) {
      if (!Array.isArray sublayers)
        throw TypeError 'sublayers argument must be an array of UILayers'
      @sublayers.forEach ^(sublayer) { @element_.removeChild sublayer }
      sublayers.forEach ^(sublayer) { @addSublayer sublayer }, this
    }
  },

  firstSublayer: {
    get: ^{ @drawContent_ ? undefined : UILayer.firstLayerInElement @element_ }
  },

  superlayer: {
    get: ^{
      (pel = @element_.parentNode) && pel.UILayer && UILayer.prototype.isPrototypeOf(pel.UILayer) && pel.UILayer
    }
  },

  # -------------------------------------------------------------------------------------------
  # Style Attributes

  perspective: {
    get: ^{
      (v = @style.getPropertyCSSValue lookupCSS 'perspective') &&
        v.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) || 0
    },
    set: ^(distance) { @element_.style[ lookupJS 'perspective' ] = distance || 'none' },
  },

  perspectiveOrigin: {
    get: ^{
      style = @element_.style
      [ (v = style.getPropertyCSSValue lookupCSS 'perspective-origin-x')
          && (v.getFloatValue(CSSPrimitiveValue.CSS_PERCENTAGE) || 0.5) / 100,
        (v = style.getPropertyCSSValue lookupCSS 'perspective-origin-y')
          && (v.getFloatValue(CSSPrimitiveValue.CSS_PERCENTAGE) || 0.5) / 100,
        (v = style.getPropertyCSSValue lookupCSS 'perspective-origin-z')
          && (v.getFloatValue(CSSPrimitiveValue.CSS_PERCENTAGE) || 0) / 100 ]
    },
    set: ^(distance) {
      if (Array.isArray distance)
        distance = (distance[0]*100)+'% '+((distance[1] || 0.5)*100)+'% '+((distance[2] || 0)*100)+'%'
      @element_.style[ lookupJS 'perspectiveOrigin' ] = distance
    },
  },

  preserve3d: {
    get: ^{
      @element_.style[ lookupJS 'transformStyle' ] == 'preserve-3d'
    },
    set: ^(preserve3d) {
      property = lookupCSS 'transform-style'
      if (preserve3d) {
        @element_.style.setProperty property, 'preserve-3d', null
      } else {
        @element_.style.removeProperty property
      }
    },
  },

  anchor: {
    get: ^{
      anchor = {}
      style = @style
      readValue = ^(name) {
        if ((v = style.getPropertyCSSValue name) && v.primitiveType != CSSPrimitiveValue.CSS_IDENT) {
          anchor[name] = (v.primitiveType == CSSPrimitiveValue.CSS_PX) ?
            v.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) : v.cssText
        }
      }
      readValue 'left'
      readValue 'top'
      readValue 'right'
      readValue 'bottom'
      anchor
    },
    set: ^(anchor) {
      t = r = b = l = undefined
      if (typeof anchor == 'string') {
        anchor.split(/\s+/).forEach ^(word) {
          switch (word[0].toLowerCase()) {
            case 'b': b = '0'; break
            case 'l': l = '0'; break
            case 'r': r = '0'; break
            case 't': t = '0'; break
          }
        }
      } else if (typeof anchor == 'object') {
        if ((t = anchor.top) && (typeof t == 'number')) t += 'px'
        if ((r = anchor.right) && (typeof r == 'number')) r += 'px'
        if ((b = anchor.bottom) && (typeof b == 'number')) b += 'px'
        if ((l = anchor.left) && (typeof l == 'number')) l += 'px'
      } else if (!anchor) {
        throw TypeError 'Value of anchor must be a string or object'
      }
      style = @style
      (t == undefined) ? style.removeProperty('top') : style.top = t
      (r == undefined) ? style.removeProperty('right') : style.right = r
      (b == undefined) ? style.removeProperty('bottom') : style.bottom = b
      (l == undefined) ? style.removeProperty('left') : style.left = l
    }
  },

  frame: {
    get: ^{
      if (!(frame_ = @frame_)) {
        frame_ = UIFrame this
        Object.defineProperty this, 'frame_', {value:frame_}
      }
      frame_
    },
    set: ^(frame) {
      if (typeof frame != 'object') throw TypeError 'not an object'
      frame_ = @frame

      eventsMuted = @eventsMuted
      @eventsMuted = true

      oldValues = {}
      frame.forEach ^(name, value) {
        oldValues[name] = frame_[name]
        frame_[name] = value
      }

      if (!(@eventsMuted = eventsMuted)) {
        @emit 'change:frame', {oldValues:oldValues}
      }
    }
  },

  computedBounds: {
    get: ^{
      style = @computedStyle
      bounds = {width:0, height:0}
      if ((v = style.getPropertyCSSValue 'width') && (v.primitiveType == CSSPrimitiveValue.CSS_PX)) {
        bounds.width = v.getFloatValue CSSPrimitiveValue.CSS_PX
      } else {
        bounds.width = -1
      }
      if ((v = style.getPropertyCSSValue 'height') && (v.primitiveType == CSSPrimitiveValue.CSS_PX)) {
        bounds.height = v.getFloatValue CSSPrimitiveValue.CSS_PX
      } else {
        bounds.height = -1
      }
      bounds
    }
  },

  rotation: {
    get: ^{
      if (!(rotation_ = @rotation_)) {
        rotation_ = RotationProxy this
        Object.defineProperty this, 'rotation_', {value:rotation_}
      }
      rotation_
    },
    set: ^(values) {
      if (typeof values != 'object') throw TypeError 'not an object'

      oldValues = {}

      if ((x = values.x) != @rotateX_) { oldValues.x = @rotateX_ ; @rotateX_ = x }
      if ((y = values.y) != @rotateY_) { oldValues.y = @rotateY_ ; @rotateY_ = y }
      if ((z = values.z) != @rotateZ_) { oldValues.z = @rotateZ_ ; @rotateZ_ = z }

      @matrix = @matrix

      @emit 'change:rotation', {oldValues:oldValues}
    }
  },

  computedStyle: {
    get: ^{ window.getComputedStyle @element_ }
  },

  style: {
    get: ^{ @element_.style },
    set: ^(style) {
      style_ = @element_.style
      style.forEach ^(k, v) { style_[k] = v }
    },
  },

  classNames: {
    get: ^{ classNames @element_ },
    set: ^(cssClassNames) {
      if (Array.isArray cssClassNames)
        cssClassNames = cssClassNames.join ' '
      @element_.className = cssClassNames
    }
  },

  doubleSided: {
    get: ^{ @element_.style[ lookupJS 'backfaceVisibility' ] == 'visible' },
    set: ^(doubleSided) {
      property = lookupCSS 'backface-visibility'
      if (doubleSided) {
        @element_.style.setProperty property, 'visible', null
      } else {
        @element_.style.removeProperty property
      }
    },
  },

  cornerRadius: {
    get: ^{
      (v = @computedStyle.getPropertyCSSValue lookupCSS 'border-top-left-radius') &&
       v.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) || 0
    },
    set: ^(value) {
      property = lookupJS 'borderRadius'
      if (value && (value = Number value)) {
        @element_.style[property] = value.toFixed(0)+'px'
      } else {
        @element_.style[property] = null
      }
    }
  },

  backgroundColor: {
    get: ^{
      ((color = @computedStyle.backgroundColor) == 'transparent') ? null : color
    },
    set: ^(color) {
      @element_.style.backgroundColor = _canonicalColor color
    },
  },

  color: {
    get: ^{ ((color = @computedStyle.color) == 'transparent') ? null : color },
    set: ^(color) { @element_.style.color = _canonicalColor color },
  },

  hidden: {
    get: ^{ @computedStyle.visibility == 'hidden' },
    set: ^(hidden) { @computedStyle.visibility = hidden ? 'hidden' : null },
  },

  masksToBounds: {
    get: ^{ @computedStyle.overflow == 'hidden' },
    set: ^(clip) { @style.overflow = clip ? 'hidden' : null },
  },

  opacity: {
    get: ^{ (v = @computedStyle.getPropertyCSSValue 'opacity') && v.getFloatValue CSSPrimitiveValue.CSS_NUMBER },
    set: ^(opacity) { @element_.style.opacity = Number opacity },
  },

  zPosition: {
    get: ^{ (v = @computedStyle.getPropertyCSSValue 'z-index') && v.getFloatValue CSSPrimitiveValue.CSS_NUMBER },
    set: ^(value) { @element_.style.zIndex = Number(value).toFixed 0 },
  },

  # -------------------
  # Custom drawing

  drawContent: {
    get: ^{ @drawContent_ },
    set: ^(drawContentFunction) {
      if (typeof drawContentFunction != 'function') {
        # Stop drawing custom content
        if (@drawContent_) {
          if (!@_originalElement || typeof @_originalElement == 'string') {
            newElement = @ownerDocument.createElement(@_originalElement || 'div')
          } else {
            newElement = @_originalElement
          }
          @element_ = _swapElement @element_.parentNode, @element_, newElement
          @_originalElement = undefined
          @removeEventListener 'change:frame', @drawContentAfterFrameSizeChange
        }
        @drawContent_ = undefined

      } else if (!@drawContent_) {
        @drawContent_ = drawContentFunction

        # Start drawing custom content
        if (@element_.nodeName != 'CANVAS') {
          # Save a ref to original element so we can revert
          @_originalElement = @element_.hasChildNodes() ? @element_ : @element_.nodeName
          newElement = @ownerDocument.createElement 'canvas'
          @element_ = _swapElement @element_.parentNode, @element_, newElement
        }

        # Call drawContent when our frame size changes
        @on 'change:frame', @drawContentAfterFrameSizeChange

        # Initial drawing
        if (@document) {
          @drawContentAfterFrameSizeChange()
        } else {
          @on 'DOMNodeInsertedIntoDocument', initialDrawContent = ^{
            @drawContentAfterFrameSizeChange()
            @removeEventListener 'DOMNodeInsertedIntoDocument', initialDrawContent
          }
        }

      } else if (@drawContent_ != drawContentFunction) {
        @drawContent_ = drawContentFunction

        # Redraw
        @drawContentAfterFrameSizeChange()
      }

    }
  },

  graphicsContext2D: {
    get: ^{ @element_.getContext && @element_.getContext '2d' }
  },

  graphicsContext3D: {
    get: ^{ @element_.getContext && @element_.getContext 'webgl' }
  },


  # -------------------------------------------------------------------------------------------
  # Animation

  animated: {
    get: ^{
      if (!hasClassName @element_, 'animated')
        return false
      @computedStyle[ lookupJS 'transitionProperty' ]
    },
    set: ^(animated) {
      if (animated && animated != 'none') {
        addClassName @element_, 'animated'
        transform = lookupCSS 'transform'
        if (animated == 'geometry') {
          animated = transform + ',width,height'
        } else if (animated == 'transform') {
          animated = transform
        } else if (Array.isArray animated) {
          animated = animated.join ','
        } else if (typeof animated != 'string') {
          animated = 'all'
        }

        @element_.style.setProperty lookupCSS('transition-property'), animated, null
      } else if (hasClassName @element_, 'animated') {
        removeClassName @element_, 'animated'
        @element_.style.removeProperty lookupCSS 'transition'
      }
    }
  },

  animationDuration: {
    get: ^{
      if (v = @style.getPropertyCSSValue lookupCSS 'transition-duration') {
        return v.getFloatValue CSSPrimitiveValue.CSS_MS
      } else if (v = @computedStyle.getPropertyCSSValue lookupCSS 'transition-duration') {
        return v[0].getFloatValue CSSPrimitiveValue.CSS_MS
      }
      0
    },
    set: ^(value) {
      if (typeof value != 'number') throw TypeError 'animationDuration must be a number'
      else if (value < 0) throw TypeError 'animationDuration must be a positive number'
      @element_.style.setProperty lookupCSS('transition-duration'), value.toFixed(0)+'ms', null
    }
  },

  animationTimingFunction: {
    get: ^{
      if (v = @computedStyle.getPropertyCSSValue lookupCSS 'transition-timing-function')
        return v.cssText
    },
    set: ^(value) {
      @element_.style.setProperty lookupCSS('transition-timing-function'), value, null
    }
  },

  # -------------------------------------------------------------------------------------------
  # DOM

  ownerDocument: { get: ^{ @element_.ownerDocument } },

  document: {
    get: ^{
      ownerDocument = @ownerDocument
      ownerDocument.documentElement.contains(@element_) && ownerDocument
    }
  },

  # -------------------------------------------------------------------------------------------
  # Identification

  tag: {
    get: ^{ @element_.id },
    set: ^(tag) { @element_.id = Text tag },
  },

  excludedFromHitTesting: {
    get: ^{
      @element_.style.getPropertyValue('pointer-events') == 'none'
    },
    set: ^(isExcluded) {
      if (isExcluded) @element_.style.setProperty 'pointer-events', 'none', null
      else @element_.style.removeProperty 'pointer-events'
    },
  },
}


# -------------------------------------------------------------------------------------------
# Hit testing

UILayer.hitTest = ^(x, y) {
  if ((element = document.elementFromPoint x, y)) {
    # Find closest parent element that is controlled by a UILayer (including the target element)

    # Implementation note: We do "el != element && ..." as an optimization. Any layer which have
    # its excludedFromHitTesting set to true will never be returned by document.elementFromPoint,
    # thus we only need to check excludedFromHitTesting for parent elements.

    el = element
    while (!(UILayer.prototype.isPrototypeOf el.UILayer) || (el != element && el.UILayer.excludedFromHitTesting)) {
      if (!(el = el.parentNode))
        return
    }
    return el.UILayer
  }
}


# Properties for layers which are texture-backed
if (window.WebKitCSSMatrix) {
  CSSMatrix = WebKitCSSMatrix
} else {
  import XCSSMatrix/XCSSMatrix
  CSSMatrix = XCSSMatrix
}
UILayer.textureBackedProperties = {
  matrix: {
    get: ^{
      @_matrix || (@_matrix = new CSSMatrix(@element_.style[ lookupJS 'transform' ]))
    },
    set: ^{
      M = @_matrix = arguments[0]
      property = lookupJS 'transform'
      if (!M || !(M instanceof CSSMatrix)) {
        @_matrix = null
        @element_.style[ property ] = null
      } else {
        values = 'matrix3d('+
          M.m11+','+M.m12+','+M.m13+','+M.m14+','+
          M.m21+','+M.m22+','+M.m23+','+M.m24+','+
          M.m31+','+M.m32+','+M.m33+','+M.m34+','+
          M.m41+','+M.m42+','+M.m43+','+M.m44+')'
        if (@rotateX_) values += ' rotateX('+(typeof @rotateX_ == 'number' ? @rotateX_+'deg' : @rotateX_)+')'
        if (@rotateY_) values += ' rotateY('+(typeof @rotateY_ == 'number' ? @rotateY_+'deg' : @rotateY_)+')'
        if (@rotateZ_) values += ' rotateZ('+(typeof @rotateZ_ == 'number' ? @rotateZ_+'deg' : @rotateZ_)+')'
        @element_.style[ property ] = values
      }
    }
  },

  # Scale [0-inf) -- 1.0 = 100%
  scale: {
    get: ^{
      # Note: This assumes uniform scale
      @matrix.m11
    },
    set: ^(value) {
      if (value == undefined || value == null)
        value = 1
      else if (typeof value != 'number')
        value = Number value

      if (value <= 0.0)
        throw TypeError 'scale must be larger than zero'

      matrix = @matrix
      matrix.m11 = value
      matrix.m22 = value
      matrix.m33 = value
      @matrix = matrix
    }
  },

  rotateBy: { # rotX, rotY, rotZ (0-360)
    value: ^{
      DEPRECATED_WARN 'rotateBy', 'rotation'
      matrix = @matrix
      @matrix = matrix.rotate.apply matrix, arguments
    }
  },

  scaleBy: { # x, y, z (0-1)
    value: ^{
      matrix = @matrix
      @matrix = matrix.scale.apply matrix, arguments
    }
  },

  moveBy: { # x, y, z (pixels)
    value: ^{
      matrix = @matrix
      oldValues = {x:matrix.m41, y:matrix.m42, z:matrix.m43}
      @matrix = matrix.translate.apply matrix, arguments
      if (!@eventsMuted) {
        newMatrix = @matrix
        if (!( ((oldValues.x == newMatrix.m41) && (oldValues.x = undefined))
            || ((oldValues.y == newMatrix.m42) && (oldValues.y = undefined))
            || ((oldValues.z == newMatrix.m43) && (oldValues.z = undefined)) )) {
          @emit 'change:frame', {oldValues:oldValues}
        }
      }
    }
  },

  # Origin for transformations (e.g. scaling) in the layer's own coordinates.
  transformOrigin: {
    get: ^{

      defaultOrigin = [0.5, 0.5, 0]
      shorthand = lookupJS('transformOrigin')
      origin = @element_.style[shorthand]
      if (origin) {
        origin = origin.split(' ')
        origin[0] = (parseInt(origin[0]) / 100) || defaultOrigin[0]
        origin[1] = (parseInt(origin[1]) / 100) || defaultOrigin[1]
      } else {
        origin = defaultOrigin
      }

      origin
    },
    set: ^(origin) {
      defaultOrigin = [0.5, 0.5, 0]
      style = @element_.style

      if (origin[0] !== defaultOrigin[0]) origin[0] = (100*origin[0]).toFixed(0)+'%'
      if (origin[1] !== defaultOrigin[1]) origin[1] = (100*origin[1]).toFixed(0)+'%'

      # always use the shorthand property
      # b/c support for the individual properties isn't always present
      shorthand = lookupCSS('transform-origin')
      if (prefixed.features.transform_origin_3d) {
        style.setProperty shorthand, origin.join(' ');
      } else {
        style.setProperty shorthand, origin[0] + ' ' + origin[1];
      }
    }
  },

  anchorPoint: DEPRECATED_PROPERTY('anchorPoint', 'transformOrigin'),
}


UILayer.prototype._setupSublayer = ^(layer) {
  if (!layer || UILayer.prototype.isPrototypeOf layer.UILayer)
    throw TypeError 'Sublayer '+JSON(layer)+' is not a UILayer'
  # TODO: frame width and height of zero should mean flex/follow parent
  //if (layer.frame.width == 0) layer.frame.width = @frame.width
  if (layer.frame.width < 0) {
    # layer.frame.width = @frame.width
    style = layer.element.style
    if (!style.width) style.width = 'auto'
    style.right = style.left = '0'
  }
  if (layer.frame.height < 0 && layer.style.height != 'inherit') {
    # layer.frame.height = @frame.height
    style = layer.element.style
    if (!style.height) style.height = 'auto'
    style.top = style.bottom = '0'
  }
}

UILayer.prototype.addSublayer = ^(layer) {
  if (@drawContent_) {
    console.warn 'adding sublayers to a layer with custom drawing has no effect'
    return
  }
  @_setupSublayer layer
  @element_.appendChild layer.element
  layer.emit 'uilayer:added-to-superlayer', {superlayer:this}
  @emit 'uilayer:added-sublayer', {sublayer:layer}
  layer
}

UILayer.prototype.removeSublayer = ^(layer, index) {
  cn = @element_.childNodes
  if (layer && UILayer.prototype.isPrototypeOf layer) {
    el = layer.element
  } else if (index && (index = Number index) >= 0 && !isNaN(index)) {
    el = cn.item index
  }
  if (el && el.UILayer && UILayer.prototype.isPrototypeOf el.UILayer) {
    try { @element_.removeChild el } catch (e) { return undefined }
    layer = el.UILayer
    layer.emit 'uilayer:removed-from-superlayer', {superlayer:this}
    @emit 'uilayer:removed-sublayer', {sublayer:layer}
    return layer
  }
}

UILayer.prototype.removeFromSuperlayer = ^{
  if (!(superlayer = @superlayer))
    throw Error 'Not attached to any superlayer'
  superlayer.element.removeChild @element_
  @emit 'uilayer:removed-from-superlayer', {superlayer:superlayer}
  superlayer.emit 'uilayer:removed-sublayer', {sublayer:this}
}

UILayer.prototype.removeAllSublayers = ^{
  removedSublayers = []
  cn = @element_.childNodes
  for (i=0; i < cn.length; ++i) {
    el = cn[i]
    if (el.UILayer && UILayer.prototype.isPrototypeOf el.UILayer) {
      removedSublayers.push el.UILayer
      @element_.removeChild el
    }
  }
  removedSublayers
}

UILayer.prototype.setSublayerAtIndex = ^(index, layer) {
  if (!layer || !UILayer.prototype.isPrototypeOf(layer))
    layer = null
  else
    @_setupSublayer layer

  if (index && (index = Number index) >= 0 && !isNaN(index)) {
    el = @element_.childNodes.item index
    if (el && el.UILayer && UILayer.prototype.isPrototypeOf el.UILayer) {
      if (layer) {
        # Replace
        @element_.replaceChild layer.element, el
        layer.emit 'uilayer:added-to-superlayer', {superlayer:this}
        @emit 'uilayer:added-sublayer', {sublayer:layer}
      } else {
        # Remove
        @element_.removeChild el
      }
      el.UILayer.emit 'uilayer:removed-from-superlayer', {superlayer:this}
      @emit 'uilayer:removed-sublayer', {sublayer:el.UILayer}
      return el
    }
  }

  # Add
  @element_.appendChild layer.element
  layer.emit 'uilayer:added-to-superlayer', {superlayer:this}
  @emit 'uilayer:added-sublayer', {sublayer:layer}
}



UILayer.prototype.superlayerInClassStructure = ^{  # class, class, ..
  #expectedClassStructure = [UILayer, ExpandoContent, ExpandoCell]
  expectedClassStructure = arguments
  i = 0
  superlayer = this
  while (superlayer && (cls = expectedClassStructure[i++])) {
    superlayer = superlayer.superlayer
    if (!superlayer || !cls.prototype.isPrototypeOf superlayer) {
      superlayer = undefined
      break
    }
  }
  superlayer
}

UILayer.prototype.isSublayerOf = ^(superlayer) {
  superlayer && UILayer.prototype.isPrototypeOf(superlayer) && @element_.parentNode == superlayer.element
}

UILayer.prototype.layerWithTag = UILayer.layerWithTag,

UILayer.prototype.toJSON = ^{
  obj = {frame: @frame, scale: @scale, origin: @origin}
  # Note: This is NOT meant to produce a complete rep, but rather a "hint" of the layer's state
  if ((sublayers = @sublayers).length)
    obj.sublayers = sublayers
  if (@animated) {
    obj.animated = true
    obj.animationDelay = @animationDelay
    obj.animationDuration = @animationDuration
    obj.animationTimingFunction = @animationTimingFunction
  }
  obj
}


# ---------------------------------------------------------------------------------------
# events

isTouchDevice = false
if ('ontouchstart' in window && 'ontouchend' in document) try {
  document.createEvent "TouchEvent"
  isTouchDevice = true
} catch(e) {}


# For non-touch devices, wrap touch event listeners to intercept mouse clicks and
# fake the touch events, effectively normalizing the API (okay, almost)
if (!isTouchDevice) {
  # Note: This is still WIP and currently broken
  touchEventsToMouseEvents = {touchstart:'mousedown', touchmove:'mousemove', touchend:'mouseup'}
  makeFakeTouchEvent = ^(event, callback){
    ^(ev) {
      ev.touches = [{
        clientX: ev.clientX,
        clientY: ev.clientY,
        identifier: ev.identifier,
        pageX: ev.pageX,
        pageY: ev.pageY,
        screenX: ev.screenX,
        screenY: ev.screenY,
        target: ev.target,
      }]
      callback.apply this, Array.prototype.slice.call arguments
    }
  }

  UILayer.prototype.on = ^(type, handler) {
    if (compatType = touchEventsToMouseEvents[type]) {
      type = compatType
      handler = makeFakeTouchEvent type, handler
      # Note: There's no clean way of mapping touch and mouse events 1:1, so we just don't care
      # about handle toggling of mousemove
    }
    layer = this
    eventHandler = ^{ handler.apply layer, arguments }
    @element_.addEventListener type, eventHandler, false
    eventHandler
  }

  UILayer.prototype.removeEventListener = ^(type, handler) {
    @element_.removeEventListener ((touchEventsToMouseEvents[type] || type), handler, false)
    handler
  }
} else {
  UILayer.prototype.on = ^(type, handler) {
    layer = this
    eventHandler = ^{ handler.apply layer, arguments }
    @element_.addEventListener type, eventHandler, false
    eventHandler
  }

  UILayer.prototype.removeEventListener = ^(type, handler) {
    @element_.removeEventListener type, handler, false
    handler
  }
}


# Events level 3 spec name->class mappings
UIEvent = 'UIEvent'
FocusEvent = 'FocusEvent'
MouseEvent = 'MouseEvent'
TouchEvent = 'TouchEvent'
WheelEvent = 'WheelEvent'
TextEvent = 'TextEvent'
KeyboardEvent = 'KeyboardEvent'
CompositionEvent = 'CompositionEvent'
MutationEvent = 'MutationEvent'
MutationNameEvent = 'MutationNameEvent'
CustomEvent = 'CustomEvent'
TransitionEvent = 'TransitionEvent'

kEventClasses = {
  DOMActivate:UIEvent, load:UIEvent, unload:UIEvent, abort:UIEvent, error:UIEvent,
  select:UIEvent, resize:UIEvent, scroll:UIEvent,

  blur:FocusEvent, DOMFocusIn:FocusEvent, DOMFocusOut:FocusEvent, focus:FocusEvent,
  focusin:FocusEvent, focusout:FocusEvent,

  click:MouseEvent, dblclick:MouseEvent, mousedown:MouseEvent, mouseenter:MouseEvent,
  mouseleave:MouseEvent, mousemove:MouseEvent, mouseover:MouseEvent, mouseout:MouseEvent,
  mouseup:MouseEvent,

  touchstart:TouchEvent, touchmove:TouchEvent, touchend:TouchEvent, touchcancel:TouchEvent,

  wheel:WheelEvent,

  textinput:TextEvent,

  keydown:KeyboardEvent, keypress:KeyboardEvent, keyup:KeyboardEvent,

  compositionstart:CompositionEvent, compositionupdate:CompositionEvent, compositionend:CompositionEvent,

  DOMAttrModified:MutationEvent, DOMCharacterDataModified:MutationEvent, DOMNodeInserted:MutationEvent,
  DOMNodeInsertedIntoDocument:MutationEvent, DOMNodeRemoved:MutationEvent,
  DOMNodeRemovedFromDocument:MutationEvent, DOMSubtreeModified:MutationEvent,

  DOMAttributeNameChanged:MutationNameEvent, DOMElementNameChanged:MutationNameEvent,

  transitionend: TransitionEvent
}


# emit {type, bubbles:true, cancelable:true, ...} -> bool
# emit type, {bubbles:true, cancelable:true, ...} -> bool
# The return value is false if at least one of the event handlers which
# handled this event called preventDefault. Otherwise it returns true.
UILayer.prototype.emit = ^{
  if (@eventsMuted)
    return
  if (typeof arguments[0] == 'object')
    options = arguments[0]
  else if (typeof arguments.keywords == 'object')
    options = arguments.keywords
  else {
    options = (typeof arguments[1] == 'object') ? arguments[1] : {}
    options.type = arguments[0]
  }
  if (!options.type) throw Error 'no event type specified'

  eventClass = kEventClasses[options.type] || CustomEvent

  if (eventClass == TouchEvent && !isTouchDevice) {
    # need to convert
    options.type = touchEventsToMouseEvents[options.type]
    eventClass = kEventClasses[options.type] || CustomEvent
  }

  if (!(ev = document.createEvent eventClass)) {
    eventClass = CustomEvent
    ev = document.createEvent eventClass
  }

  options.bubbles = !!(options.bubbles == undefined ? true : options.bubbles)
  options.cancelable = !!(options.cancelable == undefined ? true : options.cancelable)

  if (eventClass == UIEvent) {
    ev.initUIEvent(options.type, options.bubbles, options.cancelable, (options.view || window),
                   (options.detail != undefined ? options.detail : 1) )
  } else if (eventClass == MouseEvent) {
    ev.initMouseEvent(options.type, options.bubbles, options.cancelable, (options.view || window),
                      (options.detail != undefined ? options.detail : 1),
                      options.screenX, options.screenY,
                      options.clientX, options.clientY,
                      !!options.ctrlKey, !!options.altKey, !!options.shiftKey, !!options.metaKey,
                      options.button != undefined ? Number(options.button) : undefined,
                      options.relatedTarget  # an EventTarget
                     )
  } else if (eventClass == TransitionEvent) {
    ev.initTransitionEvent(options.type, options.bubbles, options.cancelable,
                           options.propertyName,
                           options.elapsedTime /* float */ )
  } else {
    if (eventClass == CustomEvent) {
      ev.initCustomEvent options.type, options.bubbles, options.cancelable, options.detail
    } else {
      ev.initEvent options.type, options.bubbles, options.cancelable
    }
    keysToIgnore = {__kw:1,type:1,bubbles:1,cancelable:1,detail:1}
    options.forEach ^(key, value) {
      if (key in keysToIgnore) return
      ev[key] = value
    }
  }

  @element_.dispatchEvent ev
}


#e.__proto__ = proto #Object.create e.__proto__, properties
Object.defineProperties UILayer.prototype, UILayer.properties
Object.defineProperties UILayer.prototype, UILayer.textureBackedProperties

# ---------------------------------------------------------------------------------------

RotationProxy = class {
  constructor: ^(layer) {
    Object.defineProperty this, 'layer', {value:layer}
  },
  toString: ^{
    '{x:'+@x+', y:'+@y+', z:'+@z+'}'
  },
  toJSON: ^{
    return {x:@x, y:@y, z:@z}
  }
}
Object.defineProperties RotationProxy.prototype, {
  x: { enumerable: true,
    get: ^{ @layer.rotateX_ || 0 },
    set: ^(angle) {
      if ((oldValue = @layer.rotateX_) == angle) return
      @layer.rotateX_ = angle
      @layer.matrix = @layer.matrix
      @layer.emit 'change:rotation', {oldValues:{x:oldValue}}
    }
  },

  y: { enumerable: true,
    get: ^{ @layer.rotateY_ || 0 },
    set: ^(angle) {
      if ((oldValue = @layer.rotateY_) == angle) return
      @layer.rotateY_ = angle
      @layer.matrix = @layer.matrix
      @layer.emit 'change:rotation', {oldValues:{y:oldValue}}
    }
  },

  z: { enumerable: true,
    get: ^{ @layer.rotateZ_ || 0 },
    set: ^(angle) {
      if ((oldValue = @layer.rotateZ_) == angle) return
      @layer.rotateZ_ = angle
      @layer.matrix = @layer.matrix
      @layer.emit 'change:rotation', {oldValues:{z:oldValue}}
    }
  },
}

# ---------------------------------------------------------------------------------------

# Add style to document
if ((head = document.getElementsByTagName('head')).length) head = head[0]
else head = document.body || document.documentElement
baseStyle = document.createElement 'style'
baseStyle.id = 'UILayer-base-style'
baseStyle.appendChild document.createTextNode '.uilayer {'+
'  display: block;'+
'  visibility: visible;'+
'  position: absolute;'+
'  top:auto; right:auto; bottom:auto; left:auto;'+
'  width:auto; height:auto;'+
'  overflow: visible;'+
#'  ' + lookupCSS('user-select:none') + ';'+
#'  ' + lookupCSS('text-size-adjust') + ':none;'+
'  z-index:0;'+
'  opacity:1;'+
'  ' + lookupCSS('box-sizing') + ': border-box;'+
'}\n'+
'.uilayer.textureBacked {'+
'  ' + lookupCSS('transform') + ': matrix3d(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);'+
'  ' + lookupCSS('transform-origin') + ': 50% 50% 0;'+
'  ' + lookupCSS('backface-visibility') + ': hidden;'+
'  ' + lookupCSS('transform-style') + ': flat;'+
'}\n'+
'.uilayer.animated {'+
'  ' + lookupCSS('transition-duration') + ': 500ms;'+
'  ' + lookupCSS('transition-timing-function') + ': ease;'+
'  ' + lookupCSS('transition-delay') + ': 0s;'+
'  ' + lookupCSS('transition-property') + ': none;'+
'}'

head.appendChild baseStyle
